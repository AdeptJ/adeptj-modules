package com.adeptj.modules.data.cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.adeptj.modules.data.cayenne.model.Address;

/**
 * Class _Users was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Users extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<String> GOVT_ID = Property.create("govtId", String.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<String> MOBILE_NO = Property.create("mobileNo", String.class);
    public static final Property<String> SECONDARY_MOBILE_NO = Property.create("secondaryMobileNo", String.class);
    public static final Property<List<Address>> ADDRESSES = Property.create("addresses", List.class);

    protected String email;
    protected String firstName;
    protected String govtId;
    protected String lastName;
    protected String mobileNo;
    protected String secondaryMobileNo;

    protected Object addresses;

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setGovtId(String govtId) {
        beforePropertyWrite("govtId", this.govtId, govtId);
        this.govtId = govtId;
    }

    public String getGovtId() {
        beforePropertyRead("govtId");
        return this.govtId;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void setMobileNo(String mobileNo) {
        beforePropertyWrite("mobileNo", this.mobileNo, mobileNo);
        this.mobileNo = mobileNo;
    }

    public String getMobileNo() {
        beforePropertyRead("mobileNo");
        return this.mobileNo;
    }

    public void setSecondaryMobileNo(String secondaryMobileNo) {
        beforePropertyWrite("secondaryMobileNo", this.secondaryMobileNo, secondaryMobileNo);
        this.secondaryMobileNo = secondaryMobileNo;
    }

    public String getSecondaryMobileNo() {
        beforePropertyRead("secondaryMobileNo");
        return this.secondaryMobileNo;
    }

    public void addToAddresses(Address obj) {
        addToManyTarget("addresses", obj, true);
    }

    public void removeFromAddresses(Address obj) {
        removeToManyTarget("addresses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Address> getAddresses() {
        return (List<Address>)readProperty("addresses");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "email":
                return this.email;
            case "firstName":
                return this.firstName;
            case "govtId":
                return this.govtId;
            case "lastName":
                return this.lastName;
            case "mobileNo":
                return this.mobileNo;
            case "secondaryMobileNo":
                return this.secondaryMobileNo;
            case "addresses":
                return this.addresses;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "email":
                this.email = (String)val;
                break;
            case "firstName":
                this.firstName = (String)val;
                break;
            case "govtId":
                this.govtId = (String)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "mobileNo":
                this.mobileNo = (String)val;
                break;
            case "secondaryMobileNo":
                this.secondaryMobileNo = (String)val;
                break;
            case "addresses":
                this.addresses = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.email);
        out.writeObject(this.firstName);
        out.writeObject(this.govtId);
        out.writeObject(this.lastName);
        out.writeObject(this.mobileNo);
        out.writeObject(this.secondaryMobileNo);
        out.writeObject(this.addresses);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.email = (String)in.readObject();
        this.firstName = (String)in.readObject();
        this.govtId = (String)in.readObject();
        this.lastName = (String)in.readObject();
        this.mobileNo = (String)in.readObject();
        this.secondaryMobileNo = (String)in.readObject();
        this.addresses = in.readObject();
    }

}
