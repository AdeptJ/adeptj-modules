package com.adeptj.modules.data.cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.adeptj.modules.data.cayenne.model.Users;

/**
 * Class _Address was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Address extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> CITY = Property.create("city", String.class);
    public static final Property<String> COUNTRY = Property.create("country", String.class);
    public static final Property<String> PIN = Property.create("pin", String.class);
    public static final Property<String> STATE = Property.create("state", String.class);
    public static final Property<Users> USER = Property.create("user", Users.class);

    protected String city;
    protected String country;
    protected String pin;
    protected String state;

    protected Object user;

    public void setCity(String city) {
        beforePropertyWrite("city", this.city, city);
        this.city = city;
    }

    public String getCity() {
        beforePropertyRead("city");
        return this.city;
    }

    public void setCountry(String country) {
        beforePropertyWrite("country", this.country, country);
        this.country = country;
    }

    public String getCountry() {
        beforePropertyRead("country");
        return this.country;
    }

    public void setPin(String pin) {
        beforePropertyWrite("pin", this.pin, pin);
        this.pin = pin;
    }

    public String getPin() {
        beforePropertyRead("pin");
        return this.pin;
    }

    public void setState(String state) {
        beforePropertyWrite("state", this.state, state);
        this.state = state;
    }

    public String getState() {
        beforePropertyRead("state");
        return this.state;
    }

    public void setUser(Users user) {
        setToOneTarget("user", user, true);
    }

    public Users getUser() {
        return (Users)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "city":
                return this.city;
            case "country":
                return this.country;
            case "pin":
                return this.pin;
            case "state":
                return this.state;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "city":
                this.city = (String)val;
                break;
            case "country":
                this.country = (String)val;
                break;
            case "pin":
                this.pin = (String)val;
                break;
            case "state":
                this.state = (String)val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.city);
        out.writeObject(this.country);
        out.writeObject(this.pin);
        out.writeObject(this.state);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.city = (String)in.readObject();
        this.country = (String)in.readObject();
        this.pin = (String)in.readObject();
        this.state = (String)in.readObject();
        this.user = in.readObject();
    }

}
